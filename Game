<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Boxing Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: #f0f0f0;
    }
    .game-container {
      margin: 20px auto;
      width: 600px;
      background: #333;
      color: #fff;
      padding: 20px;
      border-radius: 10px;
    }
    .health-bar {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }
    .health {
      width: 45%;
      height: 20px;
      background: #4caf50;
      border-radius: 5px;
    }
    .controls {
      margin: 20px 0;
    }
    .winner {
      font-size: 1.5em;
      margin-top: 20px;
      color: #ff5722;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <h1>Boxing Game</h1>
    <div class="health-bar">
      <div id="player1-health" class="health"></div>
      <div id="player2-health" class="health"></div>
    </div>
    <div class="controls">
      <p>Player 1: Press A to Attack, D to Defend</p>
      <p>Player 2: Press L to Attack, K to Defend</p>
    </div>
    <div id="winner" class="winner"></div>
  </div>

  <script src="game.js"></script>
</body>
</html>
// Game state
const gameState = {
  player1: { health: 100, defense: false },
  player2: { health: 100, defense: false },
  gameActive: true,
};

// Health bar elements
const player1HealthBar = document.getElementById('player1-health');
const player2HealthBar = document.getElementById('player2-health');
const winnerDisplay = document.getElementById('winner');

// Update health bars
function updateHealthBars() {
  player1HealthBar.style.width = `${gameState.player1.health}%`;
  player2HealthBar.style.width = `${gameState.player2.health}%`;

  // Change color to red if health is low
  if (gameState.player1.health <= 30) player1HealthBar.style.background = 'red';
  if (gameState.player2.health <= 30) player2HealthBar.style.background = 'red';
}

// Determine winner
function checkWinner() {
  if (gameState.player1.health <= 0) {
    winnerDisplay.textContent = "Player 2 Wins!";
    gameState.gameActive = false;
  } else if (gameState.player2.health <= 0) {
    winnerDisplay.textContent = "Player 1 Wins!";
    gameState.gameActive = false;
  }
}

// Handle attacks
function attack(attacker, defender) {
  if (gameState[defender].defense) {
    // Reduced damage if the defender is defending
    gameState[defender].health -= 5;
  } else {
    // Full damage if not defending
    gameState[defender].health -= 10;
  }
  gameState[defender].health = Math.max(0, gameState[defender].health);
  updateHealthBars();
  checkWinner();
}

// Handle key presses
document.addEventListener('keydown', (e) => {
  if (!gameState.gameActive) return;

  // Player 1 controls
  if (e.key === 'a' || e.key === 'A') {
    attack('player1', 'player2');
  } else if (e.key === 'd' || e.key === 'D') {
    gameState.player1.defense = true;
  }

  // Player 2 controls
  if (e.key === 'l' || e.key === 'L') {
    attack('player2', 'player1');
  } else if (e.key === 'k' || e.key === 'K') {
    gameState.player2.defense = true;
  }
});

// Reset defense on key up
document.addEventListener('keyup', (e) => {
  if (e.key === 'd' || e.key === 'D') {
    gameState.player1.defense = false;
  }
  if (e.key === 'k' || e.key === 'K') {
    gameState.player2.defense = false;
  }
});

// Initialize game
updateHealthBars();


